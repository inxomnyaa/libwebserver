<?php

declare(strict_types=1);

namespace Frago9876543210\WebServer;

use Closure;
use Exception;
use pocketmine\plugin\PluginException;
use pocketmine\thread\Thread;
use pocketmine\utils\Utils;
use raklib\utils\InternetAddress;

class WebServer extends Thread
{
	/** @var resource $socket */
	protected $socket;
	/** @var Closure $handler */
	protected $handler;
	/** @var InternetAddress $bindAddress */
	protected $bindAddress;
	/** @var bool $isRunning */
	protected $isRunning = true;

	/**
	 * WebServer constructor.
	 * @param InternetAddress $bindAddress
	 * @param Closure $handler
	 * @throws Exception
	 */
	public function __construct(InternetAddress $bindAddress, Closure $handler)
	{
		$this->bindAddress = $bindAddress;
		$this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
		if (@!socket_bind($this->socket, $bindAddress->getIp(), $bindAddress->getPort())) {
			throw new PluginException("Failed to bind to $bindAddress");
		}
		socket_set_option($this->socket, SOL_SOCKET, SO_REUSEADDR, 1);
		socket_listen($this->socket);
		Utils::validateCallableSignature(static function (WSConnection $connection, WSRequest $request): void {
		}, $handler);
		$this->handler = $handler;
	}

	public function onRun(): void
	{
		while ($this->isRunning) {
			if (is_resource(($client = socket_accept($this->socket)))) {
				$connection = new WSConnection($client);
				try {
					call_user_func($this->handler, $connection, WSRequest::fromHeaderString($connection->read()));
				} catch (SocketException $e) {
					print $e->getMessage();
					print $e->getTraceAsString();
				} catch (Exception $e) {
					print $e->getMessage();
					print $e->getTraceAsString();
				} finally {
					$connection->close();
					unset($connection);
				}
			}
		}
	}

	/**
	 * @return InternetAddress
	 */
	public function getBindAddress(): InternetAddress
	{
		return $this->bindAddress;
	}

	/**
	 * Disables socket processing
	 */
	public function shutdown(): void
	{
		$this->isRunning = false;
	}

	public function quit(): void
	{
		parent::quit(); // TODO: Change the autogenerated stub
	}

	/**
	 * @return Closure
	 */
	public function getHandler(): Closure
	{
		return $this->handler;
	}
}